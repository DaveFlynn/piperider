/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface SingleReportSchema {
  tables: {
    [k: string]: TableSchema;
  };
  id: string;
  created_at: string;
  datasource: DataSource;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` ".+".
 */
export interface TableSchema {
  name: string;
  description: string;
  row_count: number;
  col_count: number;
  columns: {
    [k: string]: ColumnSchema;
  };
  piperider_assertion_result: null | PipeRiderAssertionResult;
  dbt_assertion_result?: null | DbtAssertionResult;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` ".+".
 */
export interface ColumnSchema {
  total: number;
  nulls?: number;
  non_nulls: number;
  distinct: number;
  distribution?: null | Distribution;
  name: string;
  description: string;
  type: "string" | "numeric" | "integer" | "datetime" | "date" | "time" | "boolean" | "other";
  schema_type: string;
  valid?: number;
  mismatched?: number;
  profile_duration?: string;
  elapsed_milli?: number;
  sum?: number;
  avg?: number;
  min?: string | number;
  max?: string | number;
  p5?: number;
  p25?: number;
  p50?: number;
  p75?: number;
  p95?: number;
  stddev?: number;
}
export interface Distribution {
  type: string;
  labels: (string | null)[];
  counts: number[];
  bin_edges?: (number | string)[];
}
export interface PipeRiderAssertionResult {
  tests: AssertionTest[];
  columns: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".+".
     */
    [k: string]: AssertionTest[];
  };
}
export interface AssertionTest {
  name: string;
  status: "passed" | "failed";
  parameters?: {
    [k: string]: unknown;
  };
  tags?: string[];
  expected?: boolean;
  actual?: boolean;
}
export interface DbtAssertionResult {
  tests: AssertionTest[];
  columns: {
    /**
     * This interface was referenced by `undefined`'s JSON-Schema definition
     * via the `patternProperty` ".+".
     */
    [k: string]: AssertionTest[];
  };
}
export interface DataSource {
  name: string;
  type: string;
}
