/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * WritableManifest(metadata: dbt.contracts.graph.manifest.ManifestMetadata, nodes: Mapping[str, Union[dbt.contracts.graph.nodes.AnalysisNode, dbt.contracts.graph.nodes.SingularTestNode, dbt.contracts.graph.nodes.HookNode, dbt.contracts.graph.nodes.ModelNode, dbt.contracts.graph.nodes.RPCNode, dbt.contracts.graph.nodes.SqlNode, dbt.contracts.graph.nodes.GenericTestNode, dbt.contracts.graph.nodes.SnapshotNode, dbt.contracts.graph.nodes.SeedNode]], sources: Mapping[str, dbt.contracts.graph.nodes.SourceDefinition], macros: Mapping[str, dbt.contracts.graph.nodes.Macro], docs: Mapping[str, dbt.contracts.graph.nodes.Documentation], exposures: Mapping[str, dbt.contracts.graph.nodes.Exposure], metrics: Mapping[str, dbt.contracts.graph.nodes.Metric], groups: Mapping[str, dbt.contracts.graph.nodes.Group], selectors: Mapping[str, Any], disabled: Optional[Mapping[str, List[Union[dbt.contracts.graph.nodes.AnalysisNode, dbt.contracts.graph.nodes.SingularTestNode, dbt.contracts.graph.nodes.HookNode, dbt.contracts.graph.nodes.ModelNode, dbt.contracts.graph.nodes.RPCNode, dbt.contracts.graph.nodes.SqlNode, dbt.contracts.graph.nodes.GenericTestNode, dbt.contracts.graph.nodes.SnapshotNode, dbt.contracts.graph.nodes.SeedNode, dbt.contracts.graph.nodes.SourceDefinition, dbt.contracts.graph.nodes.Exposure, dbt.contracts.graph.nodes.Metric]]]], parent_map: Optional[Dict[str, List[str]]], child_map: Optional[Dict[str, List[str]]], group_map: Optional[Dict[str, List[str]]])
 */
export interface DbtManifestSchema {
  /**
   * Metadata about the manifest
   */
  metadata: {
    dbt_schema_version?: string;
    dbt_version?: string;
    generated_at?: string;
    invocation_id?: string | null;
    env?: {
      [k: string]: string;
    };
    /**
     * A unique identifier for the project
     */
    project_id?: string | null;
    /**
     * A unique identifier for the user
     */
    user_id?: string | null;
    /**
     * Whether dbt is configured to send anonymous usage statistics
     */
    send_anonymous_usage_stats?: boolean | null;
    /**
     * The type name of the adapter
     */
    adapter_type?: string | null;
  };
  /**
   * The nodes defined in the dbt project and its dependencies
   */
  nodes: {
    [k: string]:
      | AnalysisNode
      | SingularTestNode
      | HookNode
      | ModelNode
      | RPCNode
      | SqlNode
      | GenericTestNode
      | SnapshotNode
      | SeedNode;
  };
  /**
   * The sources defined in the dbt project and its dependencies
   */
  sources: {
    [k: string]: SourceDefinition;
  };
  /**
   * The macros defined in the dbt project and its dependencies
   */
  macros: {
    [k: string]: Macro;
  };
  /**
   * The docs defined in the dbt project and its dependencies
   */
  docs: {
    [k: string]: Documentation;
  };
  /**
   * The exposures defined in the dbt project and its dependencies
   */
  exposures: {
    [k: string]: Exposure;
  };
  /**
   * The metrics defined in the dbt project and its dependencies
   */
  metrics: {
    [k: string]: Metric;
  };
  /**
   * The groups defined in the dbt project
   */
  groups: {
    [k: string]: Group;
  };
  /**
   * The selectors defined in selectors.yml
   */
  selectors: {
    [k: string]: unknown;
  };
  /**
   * A mapping of the disabled nodes in the target
   */
  disabled?: {
    [k: string]: (
      | AnalysisNode
      | SingularTestNode
      | HookNode
      | ModelNode
      | RPCNode
      | SqlNode
      | GenericTestNode
      | SnapshotNode
      | SeedNode
      | SourceDefinition
      | Exposure
      | Metric
    )[];
  } | null;
  /**
   * A mapping fromÂ child nodes to their dependencies
   */
  parent_map?: {
    [k: string]: string[];
  } | null;
  /**
   * A mapping from parent nodes to their dependents
   */
  child_map?: {
    [k: string]: string[];
  } | null;
  /**
   * A mapping from group names to their nodes
   */
  group_map?: {
    [k: string]: string[];
  } | null;
}
/**
 * AnalysisNode(database: Optional[str], schema: str, name: str, resource_type: dbt.node_types.NodeType, package_name: str, path: str, original_file_path: str, unique_id: str, fqn: List[str], alias: str, checksum: dbt.contracts.files.FileHash, config: dbt.contracts.graph.model_config.NodeConfig = <factory>, _event_status: Dict[str, Any] = <factory>, tags: List[str] = <factory>, description: str = '', columns: Dict[str, dbt.contracts.graph.nodes.ColumnInfo] = <factory>, meta: Dict[str, Any] = <factory>, group: Optional[str] = None, docs: dbt.contracts.graph.unparsed.Docs = <factory>, patch_path: Optional[str] = None, build_path: Optional[str] = None, deferred: bool = False, unrendered_config: Dict[str, Any] = <factory>, created_at: float = <factory>, config_call_dict: Dict[str, Any] = <factory>, relation_name: Optional[str] = None, raw_code: str = '', language: str = 'sql', refs: List[dbt.contracts.graph.nodes.RefArgs] = <factory>, sources: List[List[str]] = <factory>, metrics: List[List[str]] = <factory>, depends_on: dbt.contracts.graph.nodes.DependsOn = <factory>, compiled_path: Optional[str] = None, compiled: bool = False, compiled_code: Optional[str] = None, extra_ctes_injected: bool = False, extra_ctes: List[dbt.contracts.graph.nodes.InjectedCTE] = <factory>, _pre_injected_sql: Optional[str] = None, contract: dbt.contracts.graph.nodes.Contract = <factory>)
 */
export interface AnalysisNode {
  database?: string | null;
  schema: string;
  name: string;
  resource_type: 'analysis';
  package_name: string;
  path: string;
  original_file_path: string;
  unique_id: string;
  fqn: string[];
  alias: string;
  checksum: FileHash;
  /**
   * NodeConfig(_extra: Dict[str, Any] = <factory>, enabled: bool = True, alias: Optional[str] = None, schema: Optional[str] = None, database: Optional[str] = None, tags: Union[List[str], str] = <factory>, meta: Dict[str, Any] = <factory>, group: Optional[str] = None, materialized: str = 'view', incremental_strategy: Optional[str] = None, persist_docs: Dict[str, Any] = <factory>, post_hook: List[dbt.contracts.graph.model_config.Hook] = <factory>, pre_hook: List[dbt.contracts.graph.model_config.Hook] = <factory>, quoting: Dict[str, Any] = <factory>, column_types: Dict[str, Any] = <factory>, full_refresh: Optional[bool] = None, unique_key: Union[str, List[str], NoneType] = None, on_schema_change: Optional[str] = 'ignore', grants: Dict[str, Any] = <factory>, packages: List[str] = <factory>, docs: dbt.contracts.graph.unparsed.Docs = <factory>, contract: dbt.contracts.graph.model_config.ContractConfig = <factory>)
   */
  config?: {
    enabled?: boolean;
    alias?: string | null;
    schema?: string | null;
    database?: string | null;
    tags?: string[] | string;
    meta?: {
      [k: string]: unknown;
    };
    group?: string | null;
    materialized?: string;
    incremental_strategy?: string | null;
    persist_docs?: {
      [k: string]: unknown;
    };
    'post-hook'?: Hook[];
    'pre-hook'?: Hook[];
    quoting?: {
      [k: string]: unknown;
    };
    column_types?: {
      [k: string]: unknown;
    };
    full_refresh?: boolean | null;
    unique_key?: string | string[] | null;
    on_schema_change?: string | null;
    grants?: {
      [k: string]: unknown;
    };
    packages?: string[];
    /**
     * Docs(show: bool = True, node_color: Optional[str] = None)
     */
    docs?: {
      show?: boolean;
      node_color?: string | null;
    };
    /**
     * ContractConfig(enforced: bool = False)
     */
    contract?: {
      enforced?: boolean;
    };
    [k: string]: unknown;
  };
  tags?: string[];
  description?: string;
  columns?: {
    [k: string]: ColumnInfo;
  };
  meta?: {
    [k: string]: unknown;
  };
  group?: string | null;
  /**
   * Docs(show: bool = True, node_color: Optional[str] = None)
   */
  docs?: {
    show?: boolean;
    node_color?: string | null;
  };
  patch_path?: string | null;
  build_path?: string | null;
  deferred?: boolean;
  unrendered_config?: {
    [k: string]: unknown;
  };
  created_at?: number;
  config_call_dict?: {
    [k: string]: unknown;
  };
  relation_name?: string | null;
  raw_code?: string;
  language?: string;
  refs?: RefArgs[];
  sources?: string[][];
  metrics?: string[][];
  /**
   * DependsOn(macros: List[str] = <factory>, nodes: List[str] = <factory>)
   */
  depends_on?: {
    macros?: string[];
    nodes?: string[];
  };
  compiled_path?: string | null;
  compiled?: boolean;
  compiled_code?: string | null;
  extra_ctes_injected?: boolean;
  extra_ctes?: InjectedCTE[];
  /**
   * Contract(enforced: bool = False, checksum: Optional[str] = None)
   */
  contract?: {
    enforced?: boolean;
    checksum?: string | null;
  };
}
/**
 * FileHash(name: str, checksum: str)
 */
export interface FileHash {
  name: string;
  checksum: string;
}
/**
 * Hook(sql: str, transaction: bool = True, index: Optional[int] = None)
 */
export interface Hook {
  sql: string;
  transaction?: boolean;
  index?: number | null;
}
/**
 * Used in all ManifestNodes and SourceDefinition
 */
export interface ColumnInfo {
  name: string;
  description?: string;
  meta?: {
    [k: string]: unknown;
  };
  data_type?: string | null;
  constraints?: ColumnLevelConstraint[];
  quote?: boolean | null;
  tags?: string[];
  [k: string]: unknown;
}
/**
 * ColumnLevelConstraint(type: dbt.contracts.graph.nodes.ConstraintType, name: Optional[str] = None, expression: Optional[str] = None, warn_unenforced: bool = True, warn_unsupported: bool = True)
 */
export interface ColumnLevelConstraint {
  type:
    | 'check'
    | 'not_null'
    | 'unique'
    | 'primary_key'
    | 'foreign_key'
    | 'custom';
  name?: string | null;
  expression?: string | null;
  warn_unenforced?: boolean;
  warn_unsupported?: boolean;
}
/**
 * RefArgs(name: str, package: Optional[str] = None, version: Union[str, float, NoneType] = None)
 */
export interface RefArgs {
  name: string;
  package?: string | null;
  version?: string | number | null;
}
/**
 * Used in CompiledNodes as part of ephemeral model processing
 */
export interface InjectedCTE {
  id: string;
  sql: string;
}
/**
 * SingularTestNode(database: Optional[str], schema: str, name: str, resource_type: dbt.node_types.NodeType, package_name: str, path: str, original_file_path: str, unique_id: str, fqn: List[str], alias: str, checksum: dbt.contracts.files.FileHash, config: dbt.contracts.graph.model_config.TestConfig = <factory>, _event_status: Dict[str, Any] = <factory>, tags: List[str] = <factory>, description: str = '', columns: Dict[str, dbt.contracts.graph.nodes.ColumnInfo] = <factory>, meta: Dict[str, Any] = <factory>, group: Optional[str] = None, docs: dbt.contracts.graph.unparsed.Docs = <factory>, patch_path: Optional[str] = None, build_path: Optional[str] = None, deferred: bool = False, unrendered_config: Dict[str, Any] = <factory>, created_at: float = <factory>, config_call_dict: Dict[str, Any] = <factory>, relation_name: Optional[str] = None, raw_code: str = '', language: str = 'sql', refs: List[dbt.contracts.graph.nodes.RefArgs] = <factory>, sources: List[List[str]] = <factory>, metrics: List[List[str]] = <factory>, depends_on: dbt.contracts.graph.nodes.DependsOn = <factory>, compiled_path: Optional[str] = None, compiled: bool = False, compiled_code: Optional[str] = None, extra_ctes_injected: bool = False, extra_ctes: List[dbt.contracts.graph.nodes.InjectedCTE] = <factory>, _pre_injected_sql: Optional[str] = None, contract: dbt.contracts.graph.nodes.Contract = <factory>)
 */
export interface SingularTestNode {
  database?: string | null;
  schema: string;
  name: string;
  resource_type: 'test';
  package_name: string;
  path: string;
  original_file_path: string;
  unique_id: string;
  fqn: string[];
  alias: string;
  checksum: FileHash;
  /**
   * TestConfig(_extra: Dict[str, Any] = <factory>, enabled: bool = True, alias: Optional[str] = None, schema: Optional[str] = 'dbt_test__audit', database: Optional[str] = None, tags: Union[List[str], str] = <factory>, meta: Dict[str, Any] = <factory>, group: Optional[str] = None, materialized: str = 'test', severity: dbt.contracts.graph.model_config.Severity = 'ERROR', store_failures: Optional[bool] = None, where: Optional[str] = None, limit: Optional[int] = None, fail_calc: str = 'count(*)', warn_if: str = '!= 0', error_if: str = '!= 0')
   */
  config?: {
    enabled?: boolean;
    alias?: string | null;
    schema?: string | null;
    database?: string | null;
    tags?: string[] | string;
    meta?: {
      [k: string]: unknown;
    };
    group?: string | null;
    materialized?: string;
    severity?: string;
    store_failures?: boolean | null;
    where?: string | null;
    limit?: number | null;
    fail_calc?: string;
    warn_if?: string;
    error_if?: string;
    [k: string]: unknown;
  };
  tags?: string[];
  description?: string;
  columns?: {
    [k: string]: ColumnInfo;
  };
  meta?: {
    [k: string]: unknown;
  };
  group?: string | null;
  /**
   * Docs(show: bool = True, node_color: Optional[str] = None)
   */
  docs?: {
    show?: boolean;
    node_color?: string | null;
  };
  patch_path?: string | null;
  build_path?: string | null;
  deferred?: boolean;
  unrendered_config?: {
    [k: string]: unknown;
  };
  created_at?: number;
  config_call_dict?: {
    [k: string]: unknown;
  };
  relation_name?: string | null;
  raw_code?: string;
  language?: string;
  refs?: RefArgs[];
  sources?: string[][];
  metrics?: string[][];
  /**
   * DependsOn(macros: List[str] = <factory>, nodes: List[str] = <factory>)
   */
  depends_on?: {
    macros?: string[];
    nodes?: string[];
  };
  compiled_path?: string | null;
  compiled?: boolean;
  compiled_code?: string | null;
  extra_ctes_injected?: boolean;
  extra_ctes?: InjectedCTE[];
  /**
   * Contract(enforced: bool = False, checksum: Optional[str] = None)
   */
  contract?: {
    enforced?: boolean;
    checksum?: string | null;
  };
}
/**
 * HookNode(database: Optional[str], schema: str, name: str, resource_type: dbt.node_types.NodeType, package_name: str, path: str, original_file_path: str, unique_id: str, fqn: List[str], alias: str, checksum: dbt.contracts.files.FileHash, config: dbt.contracts.graph.model_config.NodeConfig = <factory>, _event_status: Dict[str, Any] = <factory>, tags: List[str] = <factory>, description: str = '', columns: Dict[str, dbt.contracts.graph.nodes.ColumnInfo] = <factory>, meta: Dict[str, Any] = <factory>, group: Optional[str] = None, docs: dbt.contracts.graph.unparsed.Docs = <factory>, patch_path: Optional[str] = None, build_path: Optional[str] = None, deferred: bool = False, unrendered_config: Dict[str, Any] = <factory>, created_at: float = <factory>, config_call_dict: Dict[str, Any] = <factory>, relation_name: Optional[str] = None, raw_code: str = '', language: str = 'sql', refs: List[dbt.contracts.graph.nodes.RefArgs] = <factory>, sources: List[List[str]] = <factory>, metrics: List[List[str]] = <factory>, depends_on: dbt.contracts.graph.nodes.DependsOn = <factory>, compiled_path: Optional[str] = None, compiled: bool = False, compiled_code: Optional[str] = None, extra_ctes_injected: bool = False, extra_ctes: List[dbt.contracts.graph.nodes.InjectedCTE] = <factory>, _pre_injected_sql: Optional[str] = None, contract: dbt.contracts.graph.nodes.Contract = <factory>, index: Optional[int] = None)
 */
export interface HookNode {
  database?: string | null;
  schema: string;
  name: string;
  resource_type: 'operation';
  package_name: string;
  path: string;
  original_file_path: string;
  unique_id: string;
  fqn: string[];
  alias: string;
  checksum: FileHash;
  /**
   * NodeConfig(_extra: Dict[str, Any] = <factory>, enabled: bool = True, alias: Optional[str] = None, schema: Optional[str] = None, database: Optional[str] = None, tags: Union[List[str], str] = <factory>, meta: Dict[str, Any] = <factory>, group: Optional[str] = None, materialized: str = 'view', incremental_strategy: Optional[str] = None, persist_docs: Dict[str, Any] = <factory>, post_hook: List[dbt.contracts.graph.model_config.Hook] = <factory>, pre_hook: List[dbt.contracts.graph.model_config.Hook] = <factory>, quoting: Dict[str, Any] = <factory>, column_types: Dict[str, Any] = <factory>, full_refresh: Optional[bool] = None, unique_key: Union[str, List[str], NoneType] = None, on_schema_change: Optional[str] = 'ignore', grants: Dict[str, Any] = <factory>, packages: List[str] = <factory>, docs: dbt.contracts.graph.unparsed.Docs = <factory>, contract: dbt.contracts.graph.model_config.ContractConfig = <factory>)
   */
  config?: {
    enabled?: boolean;
    alias?: string | null;
    schema?: string | null;
    database?: string | null;
    tags?: string[] | string;
    meta?: {
      [k: string]: unknown;
    };
    group?: string | null;
    materialized?: string;
    incremental_strategy?: string | null;
    persist_docs?: {
      [k: string]: unknown;
    };
    'post-hook'?: Hook[];
    'pre-hook'?: Hook[];
    quoting?: {
      [k: string]: unknown;
    };
    column_types?: {
      [k: string]: unknown;
    };
    full_refresh?: boolean | null;
    unique_key?: string | string[] | null;
    on_schema_change?: string | null;
    grants?: {
      [k: string]: unknown;
    };
    packages?: string[];
    /**
     * Docs(show: bool = True, node_color: Optional[str] = None)
     */
    docs?: {
      show?: boolean;
      node_color?: string | null;
    };
    /**
     * ContractConfig(enforced: bool = False)
     */
    contract?: {
      enforced?: boolean;
    };
    [k: string]: unknown;
  };
  tags?: string[];
  description?: string;
  columns?: {
    [k: string]: ColumnInfo;
  };
  meta?: {
    [k: string]: unknown;
  };
  group?: string | null;
  /**
   * Docs(show: bool = True, node_color: Optional[str] = None)
   */
  docs?: {
    show?: boolean;
    node_color?: string | null;
  };
  patch_path?: string | null;
  build_path?: string | null;
  deferred?: boolean;
  unrendered_config?: {
    [k: string]: unknown;
  };
  created_at?: number;
  config_call_dict?: {
    [k: string]: unknown;
  };
  relation_name?: string | null;
  raw_code?: string;
  language?: string;
  refs?: RefArgs[];
  sources?: string[][];
  metrics?: string[][];
  /**
   * DependsOn(macros: List[str] = <factory>, nodes: List[str] = <factory>)
   */
  depends_on?: {
    macros?: string[];
    nodes?: string[];
  };
  compiled_path?: string | null;
  compiled?: boolean;
  compiled_code?: string | null;
  extra_ctes_injected?: boolean;
  extra_ctes?: InjectedCTE[];
  /**
   * Contract(enforced: bool = False, checksum: Optional[str] = None)
   */
  contract?: {
    enforced?: boolean;
    checksum?: string | null;
  };
  index?: number | null;
}
/**
 * ModelNode(database: Optional[str], schema: str, name: str, resource_type: dbt.node_types.NodeType, package_name: str, path: str, original_file_path: str, unique_id: str, fqn: List[str], alias: str, checksum: dbt.contracts.files.FileHash, config: dbt.contracts.graph.model_config.NodeConfig = <factory>, _event_status: Dict[str, Any] = <factory>, tags: List[str] = <factory>, description: str = '', columns: Dict[str, dbt.contracts.graph.nodes.ColumnInfo] = <factory>, meta: Dict[str, Any] = <factory>, group: Optional[str] = None, docs: dbt.contracts.graph.unparsed.Docs = <factory>, patch_path: Optional[str] = None, build_path: Optional[str] = None, deferred: bool = False, unrendered_config: Dict[str, Any] = <factory>, created_at: float = <factory>, config_call_dict: Dict[str, Any] = <factory>, relation_name: Optional[str] = None, raw_code: str = '', language: str = 'sql', refs: List[dbt.contracts.graph.nodes.RefArgs] = <factory>, sources: List[List[str]] = <factory>, metrics: List[List[str]] = <factory>, depends_on: dbt.contracts.graph.nodes.DependsOn = <factory>, compiled_path: Optional[str] = None, compiled: bool = False, compiled_code: Optional[str] = None, extra_ctes_injected: bool = False, extra_ctes: List[dbt.contracts.graph.nodes.InjectedCTE] = <factory>, _pre_injected_sql: Optional[str] = None, contract: dbt.contracts.graph.nodes.Contract = <factory>, access: dbt.node_types.AccessType = <AccessType.Protected: 'protected'>, constraints: List[dbt.contracts.graph.nodes.ModelLevelConstraint] = <factory>, version: Union[str, float, NoneType] = None, latest_version: Union[str, float, NoneType] = None)
 */
export interface ModelNode {
  database?: string | null;
  schema: string;
  name: string;
  resource_type: 'model';
  package_name: string;
  path: string;
  original_file_path: string;
  unique_id: string;
  fqn: string[];
  alias: string;
  checksum: FileHash;
  /**
   * NodeConfig(_extra: Dict[str, Any] = <factory>, enabled: bool = True, alias: Optional[str] = None, schema: Optional[str] = None, database: Optional[str] = None, tags: Union[List[str], str] = <factory>, meta: Dict[str, Any] = <factory>, group: Optional[str] = None, materialized: str = 'view', incremental_strategy: Optional[str] = None, persist_docs: Dict[str, Any] = <factory>, post_hook: List[dbt.contracts.graph.model_config.Hook] = <factory>, pre_hook: List[dbt.contracts.graph.model_config.Hook] = <factory>, quoting: Dict[str, Any] = <factory>, column_types: Dict[str, Any] = <factory>, full_refresh: Optional[bool] = None, unique_key: Union[str, List[str], NoneType] = None, on_schema_change: Optional[str] = 'ignore', grants: Dict[str, Any] = <factory>, packages: List[str] = <factory>, docs: dbt.contracts.graph.unparsed.Docs = <factory>, contract: dbt.contracts.graph.model_config.ContractConfig = <factory>)
   */
  config?: {
    enabled?: boolean;
    alias?: string | null;
    schema?: string | null;
    database?: string | null;
    tags?: string[] | string;
    meta?: {
      [k: string]: unknown;
    };
    group?: string | null;
    materialized?: string;
    incremental_strategy?: string | null;
    persist_docs?: {
      [k: string]: unknown;
    };
    'post-hook'?: Hook[];
    'pre-hook'?: Hook[];
    quoting?: {
      [k: string]: unknown;
    };
    column_types?: {
      [k: string]: unknown;
    };
    full_refresh?: boolean | null;
    unique_key?: string | string[] | null;
    on_schema_change?: string | null;
    grants?: {
      [k: string]: unknown;
    };
    packages?: string[];
    /**
     * Docs(show: bool = True, node_color: Optional[str] = None)
     */
    docs?: {
      show?: boolean;
      node_color?: string | null;
    };
    /**
     * ContractConfig(enforced: bool = False)
     */
    contract?: {
      enforced?: boolean;
    };
    [k: string]: unknown;
  };
  tags?: string[];
  description?: string;
  columns?: {
    [k: string]: ColumnInfo;
  };
  meta?: {
    [k: string]: unknown;
  };
  group?: string | null;
  /**
   * Docs(show: bool = True, node_color: Optional[str] = None)
   */
  docs?: {
    show?: boolean;
    node_color?: string | null;
  };
  patch_path?: string | null;
  build_path?: string | null;
  deferred?: boolean;
  unrendered_config?: {
    [k: string]: unknown;
  };
  created_at?: number;
  config_call_dict?: {
    [k: string]: unknown;
  };
  relation_name?: string | null;
  raw_code?: string;
  language?: string;
  refs?: RefArgs[];
  sources?: string[][];
  metrics?: string[][];
  /**
   * DependsOn(macros: List[str] = <factory>, nodes: List[str] = <factory>)
   */
  depends_on?: {
    macros?: string[];
    nodes?: string[];
  };
  compiled_path?: string | null;
  compiled?: boolean;
  compiled_code?: string | null;
  extra_ctes_injected?: boolean;
  extra_ctes?: InjectedCTE[];
  /**
   * Contract(enforced: bool = False, checksum: Optional[str] = None)
   */
  contract?: {
    enforced?: boolean;
    checksum?: string | null;
  };
  access?: 'protected' | 'private' | 'public';
  constraints?: ModelLevelConstraint[];
  version?: string | number | null;
  latest_version?: string | number | null;
}
/**
 * ModelLevelConstraint(type: dbt.contracts.graph.nodes.ConstraintType, name: Optional[str] = None, expression: Optional[str] = None, warn_unenforced: bool = True, warn_unsupported: bool = True, columns: List[str] = <factory>)
 */
export interface ModelLevelConstraint {
  type:
    | 'check'
    | 'not_null'
    | 'unique'
    | 'primary_key'
    | 'foreign_key'
    | 'custom';
  name?: string | null;
  expression?: string | null;
  warn_unenforced?: boolean;
  warn_unsupported?: boolean;
  columns?: string[];
}
/**
 * RPCNode(database: Optional[str], schema: str, name: str, resource_type: dbt.node_types.NodeType, package_name: str, path: str, original_file_path: str, unique_id: str, fqn: List[str], alias: str, checksum: dbt.contracts.files.FileHash, config: dbt.contracts.graph.model_config.NodeConfig = <factory>, _event_status: Dict[str, Any] = <factory>, tags: List[str] = <factory>, description: str = '', columns: Dict[str, dbt.contracts.graph.nodes.ColumnInfo] = <factory>, meta: Dict[str, Any] = <factory>, group: Optional[str] = None, docs: dbt.contracts.graph.unparsed.Docs = <factory>, patch_path: Optional[str] = None, build_path: Optional[str] = None, deferred: bool = False, unrendered_config: Dict[str, Any] = <factory>, created_at: float = <factory>, config_call_dict: Dict[str, Any] = <factory>, relation_name: Optional[str] = None, raw_code: str = '', language: str = 'sql', refs: List[dbt.contracts.graph.nodes.RefArgs] = <factory>, sources: List[List[str]] = <factory>, metrics: List[List[str]] = <factory>, depends_on: dbt.contracts.graph.nodes.DependsOn = <factory>, compiled_path: Optional[str] = None, compiled: bool = False, compiled_code: Optional[str] = None, extra_ctes_injected: bool = False, extra_ctes: List[dbt.contracts.graph.nodes.InjectedCTE] = <factory>, _pre_injected_sql: Optional[str] = None, contract: dbt.contracts.graph.nodes.Contract = <factory>)
 */
export interface RPCNode {
  database?: string | null;
  schema: string;
  name: string;
  resource_type: 'rpc';
  package_name: string;
  path: string;
  original_file_path: string;
  unique_id: string;
  fqn: string[];
  alias: string;
  checksum: FileHash;
  /**
   * NodeConfig(_extra: Dict[str, Any] = <factory>, enabled: bool = True, alias: Optional[str] = None, schema: Optional[str] = None, database: Optional[str] = None, tags: Union[List[str], str] = <factory>, meta: Dict[str, Any] = <factory>, group: Optional[str] = None, materialized: str = 'view', incremental_strategy: Optional[str] = None, persist_docs: Dict[str, Any] = <factory>, post_hook: List[dbt.contracts.graph.model_config.Hook] = <factory>, pre_hook: List[dbt.contracts.graph.model_config.Hook] = <factory>, quoting: Dict[str, Any] = <factory>, column_types: Dict[str, Any] = <factory>, full_refresh: Optional[bool] = None, unique_key: Union[str, List[str], NoneType] = None, on_schema_change: Optional[str] = 'ignore', grants: Dict[str, Any] = <factory>, packages: List[str] = <factory>, docs: dbt.contracts.graph.unparsed.Docs = <factory>, contract: dbt.contracts.graph.model_config.ContractConfig = <factory>)
   */
  config?: {
    enabled?: boolean;
    alias?: string | null;
    schema?: string | null;
    database?: string | null;
    tags?: string[] | string;
    meta?: {
      [k: string]: unknown;
    };
    group?: string | null;
    materialized?: string;
    incremental_strategy?: string | null;
    persist_docs?: {
      [k: string]: unknown;
    };
    'post-hook'?: Hook[];
    'pre-hook'?: Hook[];
    quoting?: {
      [k: string]: unknown;
    };
    column_types?: {
      [k: string]: unknown;
    };
    full_refresh?: boolean | null;
    unique_key?: string | string[] | null;
    on_schema_change?: string | null;
    grants?: {
      [k: string]: unknown;
    };
    packages?: string[];
    /**
     * Docs(show: bool = True, node_color: Optional[str] = None)
     */
    docs?: {
      show?: boolean;
      node_color?: string | null;
    };
    /**
     * ContractConfig(enforced: bool = False)
     */
    contract?: {
      enforced?: boolean;
    };
    [k: string]: unknown;
  };
  tags?: string[];
  description?: string;
  columns?: {
    [k: string]: ColumnInfo;
  };
  meta?: {
    [k: string]: unknown;
  };
  group?: string | null;
  /**
   * Docs(show: bool = True, node_color: Optional[str] = None)
   */
  docs?: {
    show?: boolean;
    node_color?: string | null;
  };
  patch_path?: string | null;
  build_path?: string | null;
  deferred?: boolean;
  unrendered_config?: {
    [k: string]: unknown;
  };
  created_at?: number;
  config_call_dict?: {
    [k: string]: unknown;
  };
  relation_name?: string | null;
  raw_code?: string;
  language?: string;
  refs?: RefArgs[];
  sources?: string[][];
  metrics?: string[][];
  /**
   * DependsOn(macros: List[str] = <factory>, nodes: List[str] = <factory>)
   */
  depends_on?: {
    macros?: string[];
    nodes?: string[];
  };
  compiled_path?: string | null;
  compiled?: boolean;
  compiled_code?: string | null;
  extra_ctes_injected?: boolean;
  extra_ctes?: InjectedCTE[];
  /**
   * Contract(enforced: bool = False, checksum: Optional[str] = None)
   */
  contract?: {
    enforced?: boolean;
    checksum?: string | null;
  };
}
/**
 * SqlNode(database: Optional[str], schema: str, name: str, resource_type: dbt.node_types.NodeType, package_name: str, path: str, original_file_path: str, unique_id: str, fqn: List[str], alias: str, checksum: dbt.contracts.files.FileHash, config: dbt.contracts.graph.model_config.NodeConfig = <factory>, _event_status: Dict[str, Any] = <factory>, tags: List[str] = <factory>, description: str = '', columns: Dict[str, dbt.contracts.graph.nodes.ColumnInfo] = <factory>, meta: Dict[str, Any] = <factory>, group: Optional[str] = None, docs: dbt.contracts.graph.unparsed.Docs = <factory>, patch_path: Optional[str] = None, build_path: Optional[str] = None, deferred: bool = False, unrendered_config: Dict[str, Any] = <factory>, created_at: float = <factory>, config_call_dict: Dict[str, Any] = <factory>, relation_name: Optional[str] = None, raw_code: str = '', language: str = 'sql', refs: List[dbt.contracts.graph.nodes.RefArgs] = <factory>, sources: List[List[str]] = <factory>, metrics: List[List[str]] = <factory>, depends_on: dbt.contracts.graph.nodes.DependsOn = <factory>, compiled_path: Optional[str] = None, compiled: bool = False, compiled_code: Optional[str] = None, extra_ctes_injected: bool = False, extra_ctes: List[dbt.contracts.graph.nodes.InjectedCTE] = <factory>, _pre_injected_sql: Optional[str] = None, contract: dbt.contracts.graph.nodes.Contract = <factory>)
 */
export interface SqlNode {
  database?: string | null;
  schema: string;
  name: string;
  resource_type: 'sql operation';
  package_name: string;
  path: string;
  original_file_path: string;
  unique_id: string;
  fqn: string[];
  alias: string;
  checksum: FileHash;
  /**
   * NodeConfig(_extra: Dict[str, Any] = <factory>, enabled: bool = True, alias: Optional[str] = None, schema: Optional[str] = None, database: Optional[str] = None, tags: Union[List[str], str] = <factory>, meta: Dict[str, Any] = <factory>, group: Optional[str] = None, materialized: str = 'view', incremental_strategy: Optional[str] = None, persist_docs: Dict[str, Any] = <factory>, post_hook: List[dbt.contracts.graph.model_config.Hook] = <factory>, pre_hook: List[dbt.contracts.graph.model_config.Hook] = <factory>, quoting: Dict[str, Any] = <factory>, column_types: Dict[str, Any] = <factory>, full_refresh: Optional[bool] = None, unique_key: Union[str, List[str], NoneType] = None, on_schema_change: Optional[str] = 'ignore', grants: Dict[str, Any] = <factory>, packages: List[str] = <factory>, docs: dbt.contracts.graph.unparsed.Docs = <factory>, contract: dbt.contracts.graph.model_config.ContractConfig = <factory>)
   */
  config?: {
    enabled?: boolean;
    alias?: string | null;
    schema?: string | null;
    database?: string | null;
    tags?: string[] | string;
    meta?: {
      [k: string]: unknown;
    };
    group?: string | null;
    materialized?: string;
    incremental_strategy?: string | null;
    persist_docs?: {
      [k: string]: unknown;
    };
    'post-hook'?: Hook[];
    'pre-hook'?: Hook[];
    quoting?: {
      [k: string]: unknown;
    };
    column_types?: {
      [k: string]: unknown;
    };
    full_refresh?: boolean | null;
    unique_key?: string | string[] | null;
    on_schema_change?: string | null;
    grants?: {
      [k: string]: unknown;
    };
    packages?: string[];
    /**
     * Docs(show: bool = True, node_color: Optional[str] = None)
     */
    docs?: {
      show?: boolean;
      node_color?: string | null;
    };
    /**
     * ContractConfig(enforced: bool = False)
     */
    contract?: {
      enforced?: boolean;
    };
    [k: string]: unknown;
  };
  tags?: string[];
  description?: string;
  columns?: {
    [k: string]: ColumnInfo;
  };
  meta?: {
    [k: string]: unknown;
  };
  group?: string | null;
  /**
   * Docs(show: bool = True, node_color: Optional[str] = None)
   */
  docs?: {
    show?: boolean;
    node_color?: string | null;
  };
  patch_path?: string | null;
  build_path?: string | null;
  deferred?: boolean;
  unrendered_config?: {
    [k: string]: unknown;
  };
  created_at?: number;
  config_call_dict?: {
    [k: string]: unknown;
  };
  relation_name?: string | null;
  raw_code?: string;
  language?: string;
  refs?: RefArgs[];
  sources?: string[][];
  metrics?: string[][];
  /**
   * DependsOn(macros: List[str] = <factory>, nodes: List[str] = <factory>)
   */
  depends_on?: {
    macros?: string[];
    nodes?: string[];
  };
  compiled_path?: string | null;
  compiled?: boolean;
  compiled_code?: string | null;
  extra_ctes_injected?: boolean;
  extra_ctes?: InjectedCTE[];
  /**
   * Contract(enforced: bool = False, checksum: Optional[str] = None)
   */
  contract?: {
    enforced?: boolean;
    checksum?: string | null;
  };
}
/**
 * GenericTestNode(test_metadata: dbt.contracts.graph.nodes.TestMetadata, database: Optional[str], schema: str, name: str, resource_type: dbt.node_types.NodeType, package_name: str, path: str, original_file_path: str, unique_id: str, fqn: List[str], alias: str, checksum: dbt.contracts.files.FileHash, config: dbt.contracts.graph.model_config.TestConfig = <factory>, _event_status: Dict[str, Any] = <factory>, tags: List[str] = <factory>, description: str = '', columns: Dict[str, dbt.contracts.graph.nodes.ColumnInfo] = <factory>, meta: Dict[str, Any] = <factory>, group: Optional[str] = None, docs: dbt.contracts.graph.unparsed.Docs = <factory>, patch_path: Optional[str] = None, build_path: Optional[str] = None, deferred: bool = False, unrendered_config: Dict[str, Any] = <factory>, created_at: float = <factory>, config_call_dict: Dict[str, Any] = <factory>, relation_name: Optional[str] = None, raw_code: str = '', language: str = 'sql', refs: List[dbt.contracts.graph.nodes.RefArgs] = <factory>, sources: List[List[str]] = <factory>, metrics: List[List[str]] = <factory>, depends_on: dbt.contracts.graph.nodes.DependsOn = <factory>, compiled_path: Optional[str] = None, compiled: bool = False, compiled_code: Optional[str] = None, extra_ctes_injected: bool = False, extra_ctes: List[dbt.contracts.graph.nodes.InjectedCTE] = <factory>, _pre_injected_sql: Optional[str] = None, contract: dbt.contracts.graph.nodes.Contract = <factory>, column_name: Optional[str] = None, file_key_name: Optional[str] = None, attached_node: Optional[str] = None)
 */
export interface GenericTestNode {
  test_metadata: TestMetadata;
  database?: string | null;
  schema: string;
  name: string;
  resource_type: 'test';
  package_name: string;
  path: string;
  original_file_path: string;
  unique_id: string;
  fqn: string[];
  alias: string;
  checksum: FileHash;
  /**
   * TestConfig(_extra: Dict[str, Any] = <factory>, enabled: bool = True, alias: Optional[str] = None, schema: Optional[str] = 'dbt_test__audit', database: Optional[str] = None, tags: Union[List[str], str] = <factory>, meta: Dict[str, Any] = <factory>, group: Optional[str] = None, materialized: str = 'test', severity: dbt.contracts.graph.model_config.Severity = 'ERROR', store_failures: Optional[bool] = None, where: Optional[str] = None, limit: Optional[int] = None, fail_calc: str = 'count(*)', warn_if: str = '!= 0', error_if: str = '!= 0')
   */
  config?: {
    enabled?: boolean;
    alias?: string | null;
    schema?: string | null;
    database?: string | null;
    tags?: string[] | string;
    meta?: {
      [k: string]: unknown;
    };
    group?: string | null;
    materialized?: string;
    severity?: string;
    store_failures?: boolean | null;
    where?: string | null;
    limit?: number | null;
    fail_calc?: string;
    warn_if?: string;
    error_if?: string;
    [k: string]: unknown;
  };
  tags?: string[];
  description?: string;
  columns?: {
    [k: string]: ColumnInfo;
  };
  meta?: {
    [k: string]: unknown;
  };
  group?: string | null;
  /**
   * Docs(show: bool = True, node_color: Optional[str] = None)
   */
  docs?: {
    show?: boolean;
    node_color?: string | null;
  };
  patch_path?: string | null;
  build_path?: string | null;
  deferred?: boolean;
  unrendered_config?: {
    [k: string]: unknown;
  };
  created_at?: number;
  config_call_dict?: {
    [k: string]: unknown;
  };
  relation_name?: string | null;
  raw_code?: string;
  language?: string;
  refs?: RefArgs[];
  sources?: string[][];
  metrics?: string[][];
  /**
   * DependsOn(macros: List[str] = <factory>, nodes: List[str] = <factory>)
   */
  depends_on?: {
    macros?: string[];
    nodes?: string[];
  };
  compiled_path?: string | null;
  compiled?: boolean;
  compiled_code?: string | null;
  extra_ctes_injected?: boolean;
  extra_ctes?: InjectedCTE[];
  /**
   * Contract(enforced: bool = False, checksum: Optional[str] = None)
   */
  contract?: {
    enforced?: boolean;
    checksum?: string | null;
  };
  column_name?: string | null;
  file_key_name?: string | null;
  attached_node?: string | null;
}
/**
 * TestMetadata(name: str, kwargs: Dict[str, Any] = <factory>, namespace: Optional[str] = None)
 */
export interface TestMetadata {
  name: string;
  kwargs?: {
    [k: string]: unknown;
  };
  namespace?: string | null;
}
/**
 * SnapshotNode(database: Optional[str], schema: str, name: str, resource_type: dbt.node_types.NodeType, package_name: str, path: str, original_file_path: str, unique_id: str, fqn: List[str], alias: str, checksum: dbt.contracts.files.FileHash, config: dbt.contracts.graph.model_config.SnapshotConfig, _event_status: Dict[str, Any] = <factory>, tags: List[str] = <factory>, description: str = '', columns: Dict[str, dbt.contracts.graph.nodes.ColumnInfo] = <factory>, meta: Dict[str, Any] = <factory>, group: Optional[str] = None, docs: dbt.contracts.graph.unparsed.Docs = <factory>, patch_path: Optional[str] = None, build_path: Optional[str] = None, deferred: bool = False, unrendered_config: Dict[str, Any] = <factory>, created_at: float = <factory>, config_call_dict: Dict[str, Any] = <factory>, relation_name: Optional[str] = None, raw_code: str = '', language: str = 'sql', refs: List[dbt.contracts.graph.nodes.RefArgs] = <factory>, sources: List[List[str]] = <factory>, metrics: List[List[str]] = <factory>, depends_on: dbt.contracts.graph.nodes.DependsOn = <factory>, compiled_path: Optional[str] = None, compiled: bool = False, compiled_code: Optional[str] = None, extra_ctes_injected: bool = False, extra_ctes: List[dbt.contracts.graph.nodes.InjectedCTE] = <factory>, _pre_injected_sql: Optional[str] = None, contract: dbt.contracts.graph.nodes.Contract = <factory>)
 */
export interface SnapshotNode {
  database?: string | null;
  schema: string;
  name: string;
  resource_type: 'snapshot';
  package_name: string;
  path: string;
  original_file_path: string;
  unique_id: string;
  fqn: string[];
  alias: string;
  checksum: FileHash;
  config: SnapshotConfig;
  tags?: string[];
  description?: string;
  columns?: {
    [k: string]: ColumnInfo;
  };
  meta?: {
    [k: string]: unknown;
  };
  group?: string | null;
  /**
   * Docs(show: bool = True, node_color: Optional[str] = None)
   */
  docs?: {
    show?: boolean;
    node_color?: string | null;
  };
  patch_path?: string | null;
  build_path?: string | null;
  deferred?: boolean;
  unrendered_config?: {
    [k: string]: unknown;
  };
  created_at?: number;
  config_call_dict?: {
    [k: string]: unknown;
  };
  relation_name?: string | null;
  raw_code?: string;
  language?: string;
  refs?: RefArgs[];
  sources?: string[][];
  metrics?: string[][];
  /**
   * DependsOn(macros: List[str] = <factory>, nodes: List[str] = <factory>)
   */
  depends_on?: {
    macros?: string[];
    nodes?: string[];
  };
  compiled_path?: string | null;
  compiled?: boolean;
  compiled_code?: string | null;
  extra_ctes_injected?: boolean;
  extra_ctes?: InjectedCTE[];
  /**
   * Contract(enforced: bool = False, checksum: Optional[str] = None)
   */
  contract?: {
    enforced?: boolean;
    checksum?: string | null;
  };
}
/**
 * SnapshotConfig(_extra: Dict[str, Any] = <factory>, enabled: bool = True, alias: Optional[str] = None, schema: Optional[str] = None, database: Optional[str] = None, tags: Union[List[str], str] = <factory>, meta: Dict[str, Any] = <factory>, group: Optional[str] = None, materialized: str = 'snapshot', incremental_strategy: Optional[str] = None, persist_docs: Dict[str, Any] = <factory>, post_hook: List[dbt.contracts.graph.model_config.Hook] = <factory>, pre_hook: List[dbt.contracts.graph.model_config.Hook] = <factory>, quoting: Dict[str, Any] = <factory>, column_types: Dict[str, Any] = <factory>, full_refresh: Optional[bool] = None, unique_key: Optional[str] = None, on_schema_change: Optional[str] = 'ignore', grants: Dict[str, Any] = <factory>, packages: List[str] = <factory>, docs: dbt.contracts.graph.unparsed.Docs = <factory>, contract: dbt.contracts.graph.model_config.ContractConfig = <factory>, strategy: Optional[str] = None, target_schema: Optional[str] = None, target_database: Optional[str] = None, updated_at: Optional[str] = None, check_cols: Union[str, List[str], NoneType] = None)
 */
export interface SnapshotConfig {
  enabled?: boolean;
  alias?: string | null;
  schema?: string | null;
  database?: string | null;
  tags?: string[] | string;
  meta?: {
    [k: string]: unknown;
  };
  group?: string | null;
  materialized?: string;
  incremental_strategy?: string | null;
  persist_docs?: {
    [k: string]: unknown;
  };
  'post-hook'?: Hook[];
  'pre-hook'?: Hook[];
  quoting?: {
    [k: string]: unknown;
  };
  column_types?: {
    [k: string]: unknown;
  };
  full_refresh?: boolean | null;
  unique_key?: string | null;
  on_schema_change?: string | null;
  grants?: {
    [k: string]: unknown;
  };
  packages?: string[];
  /**
   * Docs(show: bool = True, node_color: Optional[str] = None)
   */
  docs?: {
    show?: boolean;
    node_color?: string | null;
  };
  /**
   * ContractConfig(enforced: bool = False)
   */
  contract?: {
    enforced?: boolean;
  };
  strategy?: string | null;
  target_schema?: string | null;
  target_database?: string | null;
  updated_at?: string | null;
  check_cols?: string | string[] | null;
  [k: string]: unknown;
}
/**
 * SeedNode(database: Optional[str], schema: str, name: str, resource_type: dbt.node_types.NodeType, package_name: str, path: str, original_file_path: str, unique_id: str, fqn: List[str], alias: str, checksum: dbt.contracts.files.FileHash, config: dbt.contracts.graph.model_config.SeedConfig = <factory>, _event_status: Dict[str, Any] = <factory>, tags: List[str] = <factory>, description: str = '', columns: Dict[str, dbt.contracts.graph.nodes.ColumnInfo] = <factory>, meta: Dict[str, Any] = <factory>, group: Optional[str] = None, docs: dbt.contracts.graph.unparsed.Docs = <factory>, patch_path: Optional[str] = None, build_path: Optional[str] = None, deferred: bool = False, unrendered_config: Dict[str, Any] = <factory>, created_at: float = <factory>, config_call_dict: Dict[str, Any] = <factory>, relation_name: Optional[str] = None, raw_code: str = '', root_path: Optional[str] = None, depends_on: dbt.contracts.graph.nodes.MacroDependsOn = <factory>)
 */
export interface SeedNode {
  database?: string | null;
  schema: string;
  name: string;
  resource_type: 'seed';
  package_name: string;
  path: string;
  original_file_path: string;
  unique_id: string;
  fqn: string[];
  alias: string;
  checksum: FileHash;
  /**
   * SeedConfig(_extra: Dict[str, Any] = <factory>, enabled: bool = True, alias: Optional[str] = None, schema: Optional[str] = None, database: Optional[str] = None, tags: Union[List[str], str] = <factory>, meta: Dict[str, Any] = <factory>, group: Optional[str] = None, materialized: str = 'seed', incremental_strategy: Optional[str] = None, persist_docs: Dict[str, Any] = <factory>, post_hook: List[dbt.contracts.graph.model_config.Hook] = <factory>, pre_hook: List[dbt.contracts.graph.model_config.Hook] = <factory>, quoting: Dict[str, Any] = <factory>, column_types: Dict[str, Any] = <factory>, full_refresh: Optional[bool] = None, unique_key: Union[str, List[str], NoneType] = None, on_schema_change: Optional[str] = 'ignore', grants: Dict[str, Any] = <factory>, packages: List[str] = <factory>, docs: dbt.contracts.graph.unparsed.Docs = <factory>, contract: dbt.contracts.graph.model_config.ContractConfig = <factory>, quote_columns: Optional[bool] = None)
   */
  config?: {
    enabled?: boolean;
    alias?: string | null;
    schema?: string | null;
    database?: string | null;
    tags?: string[] | string;
    meta?: {
      [k: string]: unknown;
    };
    group?: string | null;
    materialized?: string;
    incremental_strategy?: string | null;
    persist_docs?: {
      [k: string]: unknown;
    };
    'post-hook'?: Hook[];
    'pre-hook'?: Hook[];
    quoting?: {
      [k: string]: unknown;
    };
    column_types?: {
      [k: string]: unknown;
    };
    full_refresh?: boolean | null;
    unique_key?: string | string[] | null;
    on_schema_change?: string | null;
    grants?: {
      [k: string]: unknown;
    };
    packages?: string[];
    /**
     * Docs(show: bool = True, node_color: Optional[str] = None)
     */
    docs?: {
      show?: boolean;
      node_color?: string | null;
    };
    /**
     * ContractConfig(enforced: bool = False)
     */
    contract?: {
      enforced?: boolean;
    };
    quote_columns?: boolean | null;
    [k: string]: unknown;
  };
  tags?: string[];
  description?: string;
  columns?: {
    [k: string]: ColumnInfo;
  };
  meta?: {
    [k: string]: unknown;
  };
  group?: string | null;
  /**
   * Docs(show: bool = True, node_color: Optional[str] = None)
   */
  docs?: {
    show?: boolean;
    node_color?: string | null;
  };
  patch_path?: string | null;
  build_path?: string | null;
  deferred?: boolean;
  unrendered_config?: {
    [k: string]: unknown;
  };
  created_at?: number;
  config_call_dict?: {
    [k: string]: unknown;
  };
  relation_name?: string | null;
  raw_code?: string;
  root_path?: string | null;
  /**
   * Used only in the Macro class
   */
  depends_on?: {
    macros?: string[];
  };
}
/**
 * SourceDefinition(database: Optional[str], schema: str, name: str, resource_type: dbt.node_types.NodeType, package_name: str, path: str, original_file_path: str, unique_id: str, fqn: List[str], source_name: str, source_description: str, loader: str, identifier: str, _event_status: Dict[str, Any] = <factory>, quoting: dbt.contracts.graph.unparsed.Quoting = <factory>, loaded_at_field: Optional[str] = None, freshness: Optional[dbt.contracts.graph.unparsed.FreshnessThreshold] = None, external: Optional[dbt.contracts.graph.unparsed.ExternalTable] = None, description: str = '', columns: Dict[str, dbt.contracts.graph.nodes.ColumnInfo] = <factory>, meta: Dict[str, Any] = <factory>, source_meta: Dict[str, Any] = <factory>, tags: List[str] = <factory>, config: dbt.contracts.graph.model_config.SourceConfig = <factory>, patch_path: Optional[str] = None, unrendered_config: Dict[str, Any] = <factory>, relation_name: Optional[str] = None, created_at: float = <factory>)
 */
export interface SourceDefinition {
  database?: string | null;
  schema: string;
  name: string;
  resource_type: 'source';
  package_name: string;
  path: string;
  original_file_path: string;
  unique_id: string;
  fqn: string[];
  source_name: string;
  source_description: string;
  loader: string;
  identifier: string;
  /**
   * Quoting(database: Optional[bool] = None, schema: Optional[bool] = None, identifier: Optional[bool] = None, column: Optional[bool] = None)
   */
  quoting?: {
    database?: boolean | null;
    schema?: boolean | null;
    identifier?: boolean | null;
    column?: boolean | null;
  };
  loaded_at_field?: string | null;
  freshness?: FreshnessThreshold | null;
  external?: ExternalTable | null;
  description?: string;
  columns?: {
    [k: string]: ColumnInfo;
  };
  meta?: {
    [k: string]: unknown;
  };
  source_meta?: {
    [k: string]: unknown;
  };
  tags?: string[];
  /**
   * SourceConfig(_extra: Dict[str, Any] = <factory>, enabled: bool = True)
   */
  config?: {
    enabled?: boolean;
    [k: string]: unknown;
  };
  patch_path?: string | null;
  unrendered_config?: {
    [k: string]: unknown;
  };
  relation_name?: string | null;
  created_at?: number;
}
/**
 * FreshnessThreshold(warn_after: Optional[dbt.contracts.graph.unparsed.Time] = <factory>, error_after: Optional[dbt.contracts.graph.unparsed.Time] = <factory>, filter: Optional[str] = None)
 */
export interface FreshnessThreshold {
  warn_after?: Time | null;
  error_after?: Time | null;
  filter?: string | null;
}
/**
 * Time(count: Optional[int] = None, period: Optional[dbt.contracts.graph.unparsed.TimePeriod] = None)
 */
export interface Time {
  count?: number | null;
  period?: ('minute' | 'hour' | 'day') | null;
}
/**
 * ExternalTable(_extra: Dict[str, Any] = <factory>, location: Optional[str] = None, file_format: Optional[str] = None, row_format: Optional[str] = None, tbl_properties: Optional[str] = None, partitions: Union[List[str], List[dbt.contracts.graph.unparsed.ExternalPartition], NoneType] = None)
 */
export interface ExternalTable {
  location?: string | null;
  file_format?: string | null;
  row_format?: string | null;
  tbl_properties?: string | null;
  partitions?: string[] | ExternalPartition[] | null;
  [k: string]: unknown;
}
/**
 * ExternalPartition(_extra: Dict[str, Any] = <factory>, name: str = '', description: str = '', data_type: str = '', meta: Dict[str, Any] = <factory>)
 */
export interface ExternalPartition {
  name?: string;
  description?: string;
  data_type?: string;
  meta?: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * Macro(name: str, resource_type: dbt.node_types.NodeType, package_name: str, path: str, original_file_path: str, unique_id: str, macro_sql: str, depends_on: dbt.contracts.graph.nodes.MacroDependsOn = <factory>, description: str = '', meta: Dict[str, Any] = <factory>, docs: dbt.contracts.graph.unparsed.Docs = <factory>, patch_path: Optional[str] = None, arguments: List[dbt.contracts.graph.unparsed.MacroArgument] = <factory>, created_at: float = <factory>, supported_languages: Optional[List[dbt.node_types.ModelLanguage]] = None)
 */
export interface Macro {
  name: string;
  resource_type: 'macro';
  package_name: string;
  path: string;
  original_file_path: string;
  unique_id: string;
  macro_sql: string;
  /**
   * Used only in the Macro class
   */
  depends_on?: {
    macros?: string[];
  };
  description?: string;
  meta?: {
    [k: string]: unknown;
  };
  /**
   * Docs(show: bool = True, node_color: Optional[str] = None)
   */
  docs?: {
    show?: boolean;
    node_color?: string | null;
  };
  patch_path?: string | null;
  arguments?: MacroArgument[];
  created_at?: number;
  supported_languages?: ('python' | 'sql')[] | null;
}
/**
 * MacroArgument(name: str, type: Optional[str] = None, description: str = '')
 */
export interface MacroArgument {
  name: string;
  type?: string | null;
  description?: string;
}
/**
 * Documentation(name: str, resource_type: dbt.node_types.NodeType, package_name: str, path: str, original_file_path: str, unique_id: str, block_contents: str)
 */
export interface Documentation {
  name: string;
  resource_type: 'doc';
  package_name: string;
  path: string;
  original_file_path: string;
  unique_id: string;
  block_contents: string;
}
/**
 * Exposure(name: str, resource_type: dbt.node_types.NodeType, package_name: str, path: str, original_file_path: str, unique_id: str, fqn: List[str], type: dbt.contracts.graph.unparsed.ExposureType, owner: dbt.contracts.graph.unparsed.Owner, description: str = '', label: Optional[str] = None, maturity: Optional[dbt.contracts.graph.unparsed.MaturityType] = None, meta: Dict[str, Any] = <factory>, tags: List[str] = <factory>, config: dbt.contracts.graph.model_config.ExposureConfig = <factory>, unrendered_config: Dict[str, Any] = <factory>, url: Optional[str] = None, depends_on: dbt.contracts.graph.nodes.DependsOn = <factory>, refs: List[dbt.contracts.graph.nodes.RefArgs] = <factory>, sources: List[List[str]] = <factory>, metrics: List[List[str]] = <factory>, created_at: float = <factory>)
 */
export interface Exposure {
  name: string;
  resource_type: 'exposure';
  package_name: string;
  path: string;
  original_file_path: string;
  unique_id: string;
  fqn: string[];
  type: 'dashboard' | 'notebook' | 'analysis' | 'ml' | 'application';
  owner: Owner;
  description?: string;
  label?: string | null;
  maturity?: ('low' | 'medium' | 'high') | null;
  meta?: {
    [k: string]: unknown;
  };
  tags?: string[];
  /**
   * ExposureConfig(_extra: Dict[str, Any] = <factory>, enabled: bool = True)
   */
  config?: {
    enabled?: boolean;
    [k: string]: unknown;
  };
  unrendered_config?: {
    [k: string]: unknown;
  };
  url?: string | null;
  /**
   * DependsOn(macros: List[str] = <factory>, nodes: List[str] = <factory>)
   */
  depends_on?: {
    macros?: string[];
    nodes?: string[];
  };
  refs?: RefArgs[];
  sources?: string[][];
  metrics?: string[][];
  created_at?: number;
}
/**
 * Owner(_extra: Dict[str, Any] = <factory>, email: Optional[str] = None, name: Optional[str] = None)
 */
export interface Owner {
  email?: string | null;
  name?: string | null;
  [k: string]: unknown;
}
/**
 * Metric(name: str, resource_type: dbt.node_types.NodeType, package_name: str, path: str, original_file_path: str, unique_id: str, fqn: List[str], description: str, label: str, calculation_method: str, expression: str, filters: List[dbt.contracts.graph.unparsed.MetricFilter], time_grains: List[str], dimensions: List[str], timestamp: Optional[str] = None, window: Optional[dbt.contracts.graph.unparsed.MetricTime] = None, model: Optional[str] = None, model_unique_id: Optional[str] = None, meta: Dict[str, Any] = <factory>, tags: List[str] = <factory>, config: dbt.contracts.graph.model_config.MetricConfig = <factory>, unrendered_config: Dict[str, Any] = <factory>, sources: List[List[str]] = <factory>, depends_on: dbt.contracts.graph.nodes.DependsOn = <factory>, refs: List[dbt.contracts.graph.nodes.RefArgs] = <factory>, metrics: List[List[str]] = <factory>, created_at: float = <factory>, group: Optional[str] = None)
 */
export interface Metric {
  name: string;
  resource_type: 'metric';
  package_name: string;
  path: string;
  original_file_path: string;
  unique_id: string;
  fqn: string[];
  description: string;
  label: string;
  calculation_method: string;
  expression: string;
  filters: MetricFilter[];
  time_grains: string[];
  dimensions: string[];
  timestamp?: string | null;
  window?: MetricTime | null;
  model?: string | null;
  model_unique_id?: string | null;
  meta?: {
    [k: string]: unknown;
  };
  tags?: string[];
  /**
   * MetricConfig(_extra: Dict[str, Any] = <factory>, enabled: bool = True, group: Optional[str] = None)
   */
  config?: {
    enabled?: boolean;
    group?: string | null;
    [k: string]: unknown;
  };
  unrendered_config?: {
    [k: string]: unknown;
  };
  sources?: string[][];
  /**
   * DependsOn(macros: List[str] = <factory>, nodes: List[str] = <factory>)
   */
  depends_on?: {
    macros?: string[];
    nodes?: string[];
  };
  refs?: RefArgs[];
  metrics?: string[][];
  created_at?: number;
  group?: string | null;
}
/**
 * MetricFilter(field: str, operator: str, value: str)
 */
export interface MetricFilter {
  field: string;
  operator: string;
  value: string;
}
/**
 * MetricTime(count: Optional[int] = None, period: Optional[dbt.contracts.graph.unparsed.MetricTimePeriod] = None)
 */
export interface MetricTime {
  count?: number | null;
  period?: ('day' | 'week' | 'month' | 'year') | null;
}
/**
 * Group(name: str, resource_type: dbt.node_types.NodeType, package_name: str, path: str, original_file_path: str, unique_id: str, owner: dbt.contracts.graph.unparsed.Owner)
 */
export interface Group {
  name: string;
  resource_type: 'group';
  package_name: string;
  path: string;
  original_file_path: string;
  unique_id: string;
  owner: Owner;
}
